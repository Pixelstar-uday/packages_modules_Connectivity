// Signature format: 2.0
package android.app.usage {

  public class NetworkStatsManager {
    method @RequiresPermission(anyOf={android.Manifest.permission.NETWORK_STATS_PROVIDER, android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK}) public void registerNetworkStatsProvider(@NonNull String, @NonNull android.net.netstats.provider.NetworkStatsProvider);
    method @RequiresPermission(anyOf={android.Manifest.permission.NETWORK_STATS_PROVIDER, android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK}) public void unregisterNetworkStatsProvider(@NonNull android.net.netstats.provider.NetworkStatsProvider);
  }

}

package android.nearby {

  public interface BroadcastCallback {
    method public void onStatusChanged(int);
    field public static final int STATUS_FAILURE = 1; // 0x1
    field public static final int STATUS_FAILURE_ALREADY_REGISTERED = 2; // 0x2
    field public static final int STATUS_FAILURE_MISSING_PERMISSIONS = 4; // 0x4
    field public static final int STATUS_FAILURE_SIZE_EXCEED_LIMIT = 3; // 0x3
    field public static final int STATUS_OK = 0; // 0x0
  }

  public abstract class BroadcastRequest {
    method @NonNull public java.util.List<java.lang.Integer> getMediums();
    method @IntRange(from=0xffffff81, to=126) public int getTxPower();
    method public int getType();
    method public int getVersion();
    field public static final int BROADCAST_TYPE_NEARBY_PRESENCE = 3; // 0x3
    field public static final int BROADCAST_TYPE_UNKNOWN = -1; // 0xffffffff
    field public static final int PRESENCE_VERSION_UNKNOWN = -1; // 0xffffffff
    field public static final int PRESENCE_VERSION_V0 = 0; // 0x0
    field public static final int PRESENCE_VERSION_V1 = 1; // 0x1
    field public static final int UNKNOWN_TX_POWER = -127; // 0xffffff81
  }

  public final class CredentialElement implements android.os.Parcelable {
    ctor public CredentialElement(@NonNull String, @NonNull byte[]);
    method public int describeContents();
    method @NonNull public String getKey();
    method @NonNull public byte[] getValue();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nearby.CredentialElement> CREATOR;
  }

  public final class DataElement implements android.os.Parcelable {
    ctor public DataElement(int, @NonNull byte[]);
    method public int describeContents();
    method public int getKey();
    method @NonNull public byte[] getValue();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nearby.DataElement> CREATOR;
  }

  public class FastPairAccountKeyDeviceMetadata {
    method @Nullable public byte[] getDeviceAccountKey();
    method @Nullable public android.nearby.FastPairDeviceMetadata getFastPairDeviceMetadata();
    method @Nullable public android.nearby.FastPairDiscoveryItem getFastPairDiscoveryItem();
    method @Nullable public byte[] getSha256DeviceAccountKeyPublicAddress();
  }

  public static final class FastPairAccountKeyDeviceMetadata.Builder {
    ctor public FastPairAccountKeyDeviceMetadata.Builder();
    method @NonNull public android.nearby.FastPairAccountKeyDeviceMetadata build();
    method @NonNull public android.nearby.FastPairAccountKeyDeviceMetadata.Builder setDeviceAccountKey(@Nullable byte[]);
    method @NonNull public android.nearby.FastPairAccountKeyDeviceMetadata.Builder setFastPairDeviceMetadata(@Nullable android.nearby.FastPairDeviceMetadata);
    method @NonNull public android.nearby.FastPairAccountKeyDeviceMetadata.Builder setFastPairDiscoveryItem(@Nullable android.nearby.FastPairDiscoveryItem);
    method @NonNull public android.nearby.FastPairAccountKeyDeviceMetadata.Builder setSha256DeviceAccountKeyPublicAddress(@Nullable byte[]);
  }

  public class FastPairAntispoofKeyDeviceMetadata {
    method @Nullable public byte[] getAntispoofPublicKey();
    method @Nullable public android.nearby.FastPairDeviceMetadata getFastPairDeviceMetadata();
  }

  public static final class FastPairAntispoofKeyDeviceMetadata.Builder {
    ctor public FastPairAntispoofKeyDeviceMetadata.Builder();
    method @NonNull public android.nearby.FastPairAntispoofKeyDeviceMetadata build();
    method @NonNull public android.nearby.FastPairAntispoofKeyDeviceMetadata.Builder setAntispoofPublicKey(@Nullable byte[]);
    method @NonNull public android.nearby.FastPairAntispoofKeyDeviceMetadata.Builder setFastPairDeviceMetadata(@Nullable android.nearby.FastPairDeviceMetadata);
  }

  public abstract class FastPairDataProviderBase {
    ctor public FastPairDataProviderBase(@NonNull String);
    method @Nullable public final android.os.IBinder getBinder();
    method public abstract void onLoadFastPairAccountDevicesMetadata(@NonNull android.nearby.FastPairDataProviderBase.FastPairAccountDevicesMetadataRequest, @NonNull android.nearby.FastPairDataProviderBase.FastPairAccountDevicesMetadataCallback);
    method public abstract void onLoadFastPairAntispoofKeyDeviceMetadata(@NonNull android.nearby.FastPairDataProviderBase.FastPairAntispoofKeyDeviceMetadataRequest, @NonNull android.nearby.FastPairDataProviderBase.FastPairAntispoofKeyDeviceMetadataCallback);
    method public abstract void onLoadFastPairEligibleAccounts(@NonNull android.nearby.FastPairDataProviderBase.FastPairEligibleAccountsRequest, @NonNull android.nearby.FastPairDataProviderBase.FastPairEligibleAccountsCallback);
    method public abstract void onManageFastPairAccount(@NonNull android.nearby.FastPairDataProviderBase.FastPairManageAccountRequest, @NonNull android.nearby.FastPairDataProviderBase.FastPairManageActionCallback);
    method public abstract void onManageFastPairAccountDevice(@NonNull android.nearby.FastPairDataProviderBase.FastPairManageAccountDeviceRequest, @NonNull android.nearby.FastPairDataProviderBase.FastPairManageActionCallback);
    field public static final String ACTION_FAST_PAIR_DATA_PROVIDER = "android.nearby.action.FAST_PAIR_DATA_PROVIDER";
    field public static final int ERROR_CODE_BAD_REQUEST = 0; // 0x0
    field public static final int ERROR_CODE_INTERNAL_ERROR = 1; // 0x1
    field public static final int MANAGE_REQUEST_ADD = 0; // 0x0
    field public static final int MANAGE_REQUEST_REMOVE = 1; // 0x1
  }

  public static interface FastPairDataProviderBase.FastPairAccountDevicesMetadataCallback {
    method public void onError(int, @Nullable String);
    method public void onFastPairAccountDevicesMetadataReceived(@NonNull java.util.Collection<android.nearby.FastPairAccountKeyDeviceMetadata>);
  }

  public static class FastPairDataProviderBase.FastPairAccountDevicesMetadataRequest {
    method @NonNull public android.accounts.Account getAccount();
    method @NonNull public java.util.Collection<byte[]> getDeviceAccountKeys();
  }

  public static interface FastPairDataProviderBase.FastPairAntispoofKeyDeviceMetadataCallback {
    method public void onError(int, @Nullable String);
    method public void onFastPairAntispoofKeyDeviceMetadataReceived(@NonNull android.nearby.FastPairAntispoofKeyDeviceMetadata);
  }

  public static class FastPairDataProviderBase.FastPairAntispoofKeyDeviceMetadataRequest {
    method @NonNull public byte[] getModelId();
  }

  public static interface FastPairDataProviderBase.FastPairEligibleAccountsCallback {
    method public void onError(int, @Nullable String);
    method public void onFastPairEligibleAccountsReceived(@NonNull java.util.Collection<android.nearby.FastPairEligibleAccount>);
  }

  public static class FastPairDataProviderBase.FastPairEligibleAccountsRequest {
  }

  public static class FastPairDataProviderBase.FastPairManageAccountDeviceRequest {
    method @NonNull public android.accounts.Account getAccount();
    method @NonNull public android.nearby.FastPairAccountKeyDeviceMetadata getAccountKeyDeviceMetadata();
    method @Nullable public String getBleAddress();
    method public int getRequestType();
  }

  public static class FastPairDataProviderBase.FastPairManageAccountRequest {
    method @NonNull public android.accounts.Account getAccount();
    method public int getRequestType();
  }

  public static interface FastPairDataProviderBase.FastPairManageActionCallback {
    method public void onError(int, @Nullable String);
    method public void onSuccess();
  }

  public class FastPairDeviceMetadata {
    method @Nullable public String getAssistantSetupHalfSheet();
    method @Nullable public String getAssistantSetupNotification();
    method public int getBleTxPower();
    method @Nullable public String getConfirmPinDescription();
    method @Nullable public String getConfirmPinTitle();
    method @Nullable public String getConnectSuccessCompanionAppInstalled();
    method @Nullable public String getConnectSuccessCompanionAppNotInstalled();
    method public int getDeviceType();
    method @Nullable public String getDownloadCompanionAppDescription();
    method @Nullable public String getFailConnectGoToSettingsDescription();
    method @Nullable public String getFastPairTvConnectDeviceNoAccountDescription();
    method @Nullable public byte[] getImage();
    method @Nullable public String getImageUrl();
    method @Nullable public String getInitialNotificationDescription();
    method @Nullable public String getInitialNotificationDescriptionNoAccount();
    method @Nullable public String getInitialPairingDescription();
    method @Nullable public String getIntentUri();
    method @Nullable public String getLocale();
    method @Nullable public String getName();
    method @Nullable public String getOpenCompanionAppDescription();
    method @Nullable public String getRetroactivePairingDescription();
    method @Nullable public String getSubsequentPairingDescription();
    method @Nullable public String getSyncContactsDescription();
    method @Nullable public String getSyncContactsTitle();
    method @Nullable public String getSyncSmsDescription();
    method @Nullable public String getSyncSmsTitle();
    method public float getTriggerDistance();
    method @Nullable public String getTrueWirelessImageUrlCase();
    method @Nullable public String getTrueWirelessImageUrlLeftBud();
    method @Nullable public String getTrueWirelessImageUrlRightBud();
    method @Nullable public String getUnableToConnectDescription();
    method @Nullable public String getUnableToConnectTitle();
    method @Nullable public String getUpdateCompanionAppDescription();
    method @Nullable public String getWaitLaunchCompanionAppDescription();
  }

  public static final class FastPairDeviceMetadata.Builder {
    ctor public FastPairDeviceMetadata.Builder();
    method @NonNull public android.nearby.FastPairDeviceMetadata build();
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setAssistantSetupHalfSheet(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setAssistantSetupNotification(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setBleTxPower(int);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setConfirmPinDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setConfirmPinTitle(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setConnectSuccessCompanionAppInstalled(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setConnectSuccessCompanionAppNotInstalled(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setDeviceType(int);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setDownloadCompanionAppDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setFailConnectGoToSettingsDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setFastPairTvConnectDeviceNoAccountDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setImage(@Nullable byte[]);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setImageUrl(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setInitialNotificationDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setInitialNotificationDescriptionNoAccount(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setInitialPairingDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setIntentUri(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setLocale(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setName(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setOpenCompanionAppDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setRetroactivePairingDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setSubsequentPairingDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setSyncContactsDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setSyncContactsTitle(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setSyncSmsDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setSyncSmsTitle(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setTriggerDistance(float);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setTrueWirelessImageUrlCase(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setTrueWirelessImageUrlLeftBud(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setTrueWirelessImageUrlRightBud(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setUnableToConnectDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setUnableToConnectTitle(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setUpdateCompanionAppDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDeviceMetadata.Builder setWaitLaunchCompanionAppDescription(@Nullable String);
  }

  public class FastPairDiscoveryItem {
    method @Nullable public String getActionUrl();
    method public int getActionUrlType();
    method @Nullable public String getAppName();
    method public int getAttachmentType();
    method @Nullable public byte[] getAuthenticationPublicKeySecp256r1();
    method @Nullable public byte[] getBleRecordBytes();
    method public int getDebugCategory();
    method @Nullable public String getDebugMessage();
    method @Nullable public String getDescription();
    method @Nullable public String getDeviceName();
    method @Nullable public String getDisplayUrl();
    method @Nullable public String getEntityId();
    method @Nullable public String getFeatureGraphicUrl();
    method public long getFirstObservationTimestampMillis();
    method @Nullable public String getGroupId();
    method @Nullable public String getIconFfeUrl();
    method @Nullable public byte[] getIconPng();
    method @Nullable public String getId();
    method public long getLastObservationTimestampMillis();
    method public int getLastUserExperience();
    method public long getLostMillis();
    method @Nullable public String getMacAddress();
    method @Nullable public String getPackageName();
    method public long getPendingAppInstallTimestampMillis();
    method public int getRssi();
    method public int getState();
    method @Nullable public String getTitle();
    method @Nullable public String getTriggerId();
    method public int getTxPower();
    method public int getType();
  }

  public static final class FastPairDiscoveryItem.Builder {
    ctor public FastPairDiscoveryItem.Builder();
    method @NonNull public android.nearby.FastPairDiscoveryItem build();
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setActionUrl(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setActionUrlType(int);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setAppName(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setAttachmentType(int);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setAuthenticationPublicKeySecp256r1(@Nullable byte[]);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setBleRecordBytes(@Nullable byte[]);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setDebugCategory(int);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setDebugMessage(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setDescription(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setDeviceName(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setDisplayUrl(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setEntityId(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setFeatureGraphicUrl(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setFirstObservationTimestampMillis(long);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setGroupId(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setIconFfeUrl(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setIconPng(@Nullable byte[]);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setId(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setLastObservationTimestampMillis(long);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setLastUserExperience(int);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setLostMillis(long);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setMacAddress(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setPackageName(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setPendingAppInstallTimestampMillis(long);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setRssi(int);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setState(int);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setTitle(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setTriggerId(@Nullable String);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setTxPower(int);
    method @NonNull public android.nearby.FastPairDiscoveryItem.Builder setType(int);
  }

  public class FastPairEligibleAccount {
    method @Nullable public android.accounts.Account getAccount();
    method public boolean isOptIn();
  }

  public static final class FastPairEligibleAccount.Builder {
    ctor public FastPairEligibleAccount.Builder();
    method @NonNull public android.nearby.FastPairEligibleAccount build();
    method @NonNull public android.nearby.FastPairEligibleAccount.Builder setAccount(@Nullable android.accounts.Account);
    method @NonNull public android.nearby.FastPairEligibleAccount.Builder setOptIn(boolean);
  }

  public abstract class NearbyDevice {
    method @NonNull public java.util.List<java.lang.Integer> getMediums();
    method @Nullable public String getName();
    method @IntRange(from=0xffffff81, to=126) public int getRssi();
    method public static boolean isValidMedium(int);
  }

  public class NearbyManager {
    method public static boolean getFastPairScanEnabled(@NonNull android.content.Context, boolean);
    method public static void setFastPairScanEnabled(@NonNull android.content.Context, boolean);
    method public void startBroadcast(@NonNull android.nearby.BroadcastRequest, @NonNull java.util.concurrent.Executor, @NonNull android.nearby.BroadcastCallback);
    method public void startScan(@NonNull android.nearby.ScanRequest, @NonNull java.util.concurrent.Executor, @NonNull android.nearby.ScanCallback);
    method public void stopBroadcast(@NonNull android.nearby.BroadcastCallback);
    method public void stopScan(@NonNull android.nearby.ScanCallback);
  }

  public final class PresenceBroadcastRequest extends android.nearby.BroadcastRequest implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public java.util.List<java.lang.Integer> getActions();
    method @NonNull public android.nearby.PrivateCredential getCredential();
    method @NonNull public java.util.List<android.nearby.DataElement> getExtendedProperties();
    method @NonNull public byte[] getSalt();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nearby.PresenceBroadcastRequest> CREATOR;
  }

  public static final class PresenceBroadcastRequest.Builder {
    ctor public PresenceBroadcastRequest.Builder(@NonNull java.util.List<java.lang.Integer>, @NonNull byte[], @NonNull android.nearby.PrivateCredential);
    method @NonNull public android.nearby.PresenceBroadcastRequest.Builder addAction(@IntRange(from=1, to=255) int);
    method @NonNull public android.nearby.PresenceBroadcastRequest.Builder addExtendedProperty(@NonNull android.nearby.DataElement);
    method @NonNull public android.nearby.PresenceBroadcastRequest build();
    method @NonNull public android.nearby.PresenceBroadcastRequest.Builder setTxPower(@IntRange(from=0xffffff81, to=126) int);
    method @NonNull public android.nearby.PresenceBroadcastRequest.Builder setVersion(int);
  }

  public abstract class PresenceCredential {
    method @NonNull public byte[] getAuthenticityKey();
    method @NonNull public java.util.List<android.nearby.CredentialElement> getCredentialElements();
    method public int getIdentityType();
    method @NonNull public byte[] getSecretId();
    method public int getType();
    field public static final int CREDENTIAL_TYPE_PRIVATE = 0; // 0x0
    field public static final int CREDENTIAL_TYPE_PUBLIC = 1; // 0x1
    field public static final int IDENTITY_TYPE_PRIVATE = 1; // 0x1
    field public static final int IDENTITY_TYPE_PROVISIONED = 2; // 0x2
    field public static final int IDENTITY_TYPE_PUBLIC = 4; // 0x4
    field public static final int IDENTITY_TYPE_TRUSTED = 3; // 0x3
    field public static final int IDENTITY_TYPE_UNKNOWN = 0; // 0x0
  }

  public final class PresenceDevice extends android.nearby.NearbyDevice implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public String getDeviceId();
    method @Nullable public String getDeviceImageUrl();
    method public int getDeviceType();
    method public long getDiscoveryTimestampMillis();
    method @NonNull public byte[] getEncryptedIdentity();
    method @NonNull public java.util.List<android.nearby.DataElement> getExtendedProperties();
    method @NonNull public byte[] getSalt();
    method @NonNull public byte[] getSecretId();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nearby.PresenceDevice> CREATOR;
  }

  public static final class PresenceDevice.Builder {
    ctor public PresenceDevice.Builder(@NonNull String, @NonNull byte[], @NonNull byte[], @NonNull byte[]);
    method @NonNull public android.nearby.PresenceDevice.Builder addExtendedProperty(@NonNull android.nearby.DataElement);
    method @NonNull public android.nearby.PresenceDevice.Builder addMedium(int);
    method @NonNull public android.nearby.PresenceDevice build();
    method @NonNull public android.nearby.PresenceDevice.Builder setDeviceImageUrl(@Nullable String);
    method @NonNull public android.nearby.PresenceDevice.Builder setDeviceType(int);
    method @NonNull public android.nearby.PresenceDevice.Builder setDiscoveryTimestampMillis(long);
    method @NonNull public android.nearby.PresenceDevice.Builder setName(@Nullable String);
    method @NonNull public android.nearby.PresenceDevice.Builder setRssi(int);
  }

  public final class PresenceScanFilter extends android.nearby.ScanFilter implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public java.util.List<android.nearby.PublicCredential> getCredentials();
    method @NonNull public java.util.List<android.nearby.DataElement> getExtendedProperties();
    method @NonNull public java.util.List<java.lang.Integer> getPresenceActions();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nearby.PresenceScanFilter> CREATOR;
  }

  public static final class PresenceScanFilter.Builder {
    ctor public PresenceScanFilter.Builder();
    method @NonNull public android.nearby.PresenceScanFilter.Builder addCredential(@NonNull android.nearby.PublicCredential);
    method @NonNull public android.nearby.PresenceScanFilter.Builder addExtendedProperty(@NonNull android.nearby.DataElement);
    method @NonNull public android.nearby.PresenceScanFilter.Builder addPresenceAction(@IntRange(from=1, to=255) int);
    method @NonNull public android.nearby.PresenceScanFilter build();
    method @NonNull public android.nearby.PresenceScanFilter.Builder setMaxPathLoss(@IntRange(from=0, to=127) int);
  }

  public final class PrivateCredential extends android.nearby.PresenceCredential implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public String getDeviceName();
    method @NonNull public byte[] getMetadataEncryptionKey();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nearby.PrivateCredential> CREATOR;
  }

  public static final class PrivateCredential.Builder {
    ctor public PrivateCredential.Builder(@NonNull byte[], @NonNull byte[], @NonNull byte[], @NonNull String);
    method @NonNull public android.nearby.PrivateCredential.Builder addCredentialElement(@NonNull android.nearby.CredentialElement);
    method @NonNull public android.nearby.PrivateCredential build();
    method @NonNull public android.nearby.PrivateCredential.Builder setIdentityType(int);
  }

  public final class PublicCredential extends android.nearby.PresenceCredential implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public byte[] getEncryptedMetadata();
    method @NonNull public byte[] getEncryptedMetadataKeyTag();
    method @NonNull public byte[] getPublicKey();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nearby.PublicCredential> CREATOR;
  }

  public static final class PublicCredential.Builder {
    ctor public PublicCredential.Builder(@NonNull byte[], @NonNull byte[], @NonNull byte[], @NonNull byte[], @NonNull byte[]);
    method @NonNull public android.nearby.PublicCredential.Builder addCredentialElement(@NonNull android.nearby.CredentialElement);
    method @NonNull public android.nearby.PublicCredential build();
    method @NonNull public android.nearby.PublicCredential.Builder setIdentityType(int);
  }

  public interface ScanCallback {
    method public void onDiscovered(@NonNull android.nearby.NearbyDevice);
    method public void onLost(@NonNull android.nearby.NearbyDevice);
    method public void onUpdated(@NonNull android.nearby.NearbyDevice);
  }

  public abstract class ScanFilter {
    method @IntRange(from=0, to=127) public int getMaxPathLoss();
    method public int getType();
  }

  public final class ScanRequest implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public java.util.List<android.nearby.ScanFilter> getScanFilters();
    method public int getScanMode();
    method public int getScanType();
    method @NonNull public android.os.WorkSource getWorkSource();
    method public boolean isBleEnabled();
    method public static boolean isValidScanMode(int);
    method public static boolean isValidScanType(int);
    method @NonNull public static String scanModeToString(int);
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nearby.ScanRequest> CREATOR;
    field public static final int SCAN_MODE_BALANCED = 1; // 0x1
    field public static final int SCAN_MODE_LOW_LATENCY = 2; // 0x2
    field public static final int SCAN_MODE_LOW_POWER = 0; // 0x0
    field public static final int SCAN_MODE_NO_POWER = -1; // 0xffffffff
    field public static final int SCAN_TYPE_EXPOSURE_NOTIFICATION = 4; // 0x4
    field public static final int SCAN_TYPE_FAST_PAIR = 1; // 0x1
    field public static final int SCAN_TYPE_NEARBY_PRESENCE = 3; // 0x3
    field public static final int SCAN_TYPE_NEARBY_SHARE = 2; // 0x2
  }

  public static final class ScanRequest.Builder {
    ctor public ScanRequest.Builder();
    method @NonNull public android.nearby.ScanRequest.Builder addScanFilter(@NonNull android.nearby.ScanFilter);
    method @NonNull public android.nearby.ScanRequest build();
    method @NonNull public android.nearby.ScanRequest.Builder setBleEnabled(boolean);
    method @NonNull public android.nearby.ScanRequest.Builder setScanMode(int);
    method @NonNull public android.nearby.ScanRequest.Builder setScanType(int);
    method @NonNull @RequiresPermission(android.Manifest.permission.UPDATE_DEVICE_STATS) public android.nearby.ScanRequest.Builder setWorkSource(@Nullable android.os.WorkSource);
  }

}

package android.net {

  public class EthernetManager {
    method @RequiresPermission(anyOf={android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.Manifest.permission.NETWORK_STACK, android.Manifest.permission.MANAGE_ETHERNET_NETWORKS}) public void disableInterface(@NonNull String, @Nullable java.util.concurrent.Executor, @Nullable android.os.OutcomeReceiver<java.lang.String,android.net.EthernetNetworkManagementException>);
    method @RequiresPermission(anyOf={android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.Manifest.permission.NETWORK_STACK, android.Manifest.permission.MANAGE_ETHERNET_NETWORKS}) public void enableInterface(@NonNull String, @Nullable java.util.concurrent.Executor, @Nullable android.os.OutcomeReceiver<java.lang.String,android.net.EthernetNetworkManagementException>);
    method @NonNull @RequiresPermission(anyOf={android.Manifest.permission.NETWORK_STACK, android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK}) public android.net.EthernetManager.TetheredInterfaceRequest requestTetheredInterface(@NonNull java.util.concurrent.Executor, @NonNull android.net.EthernetManager.TetheredInterfaceCallback);
    method @RequiresPermission(anyOf={android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.Manifest.permission.NETWORK_STACK, android.Manifest.permission.MANAGE_ETHERNET_NETWORKS}) public void updateConfiguration(@NonNull String, @NonNull android.net.EthernetNetworkUpdateRequest, @Nullable java.util.concurrent.Executor, @Nullable android.os.OutcomeReceiver<java.lang.String,android.net.EthernetNetworkManagementException>);
  }

  public static interface EthernetManager.TetheredInterfaceCallback {
    method public void onAvailable(@NonNull String);
    method public void onUnavailable();
  }

  public static class EthernetManager.TetheredInterfaceRequest {
    method public void release();
  }

  public final class EthernetNetworkManagementException extends java.lang.RuntimeException implements android.os.Parcelable {
    ctor public EthernetNetworkManagementException(@NonNull String);
    method public int describeContents();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.net.EthernetNetworkManagementException> CREATOR;
  }

  public final class EthernetNetworkUpdateRequest implements android.os.Parcelable {
    method public int describeContents();
    method @Nullable public android.net.IpConfiguration getIpConfiguration();
    method @Nullable public android.net.NetworkCapabilities getNetworkCapabilities();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.net.EthernetNetworkUpdateRequest> CREATOR;
  }

  public static final class EthernetNetworkUpdateRequest.Builder {
    ctor public EthernetNetworkUpdateRequest.Builder();
    ctor public EthernetNetworkUpdateRequest.Builder(@NonNull android.net.EthernetNetworkUpdateRequest);
    method @NonNull public android.net.EthernetNetworkUpdateRequest build();
    method @NonNull public android.net.EthernetNetworkUpdateRequest.Builder setIpConfiguration(@Nullable android.net.IpConfiguration);
    method @NonNull public android.net.EthernetNetworkUpdateRequest.Builder setNetworkCapabilities(@Nullable android.net.NetworkCapabilities);
  }

  public class IpSecManager {
    method @RequiresPermission(android.Manifest.permission.MANAGE_IPSEC_TUNNELS) public void applyTunnelModeTransform(@NonNull android.net.IpSecManager.IpSecTunnelInterface, int, @NonNull android.net.IpSecTransform) throws java.io.IOException;
    method @NonNull @RequiresPermission(android.Manifest.permission.MANAGE_IPSEC_TUNNELS) public android.net.IpSecManager.IpSecTunnelInterface createIpSecTunnelInterface(@NonNull java.net.InetAddress, @NonNull java.net.InetAddress, @NonNull android.net.Network) throws java.io.IOException, android.net.IpSecManager.ResourceUnavailableException;
  }

  public static final class IpSecManager.IpSecTunnelInterface implements java.lang.AutoCloseable {
    method @RequiresPermission(android.Manifest.permission.MANAGE_IPSEC_TUNNELS) public void addAddress(@NonNull java.net.InetAddress, int) throws java.io.IOException;
    method public void close();
    method @NonNull public String getInterfaceName();
    method @RequiresPermission(android.Manifest.permission.MANAGE_IPSEC_TUNNELS) public void removeAddress(@NonNull java.net.InetAddress, int) throws java.io.IOException;
    method @RequiresPermission(android.Manifest.permission.MANAGE_IPSEC_TUNNELS) public void setUnderlyingNetwork(@NonNull android.net.Network) throws java.io.IOException;
  }

  public static class IpSecTransform.Builder {
    method @NonNull @RequiresPermission(android.Manifest.permission.MANAGE_IPSEC_TUNNELS) public android.net.IpSecTransform buildTunnelModeTransform(@NonNull java.net.InetAddress, @NonNull android.net.IpSecManager.SecurityParameterIndex) throws java.io.IOException, android.net.IpSecManager.ResourceUnavailableException, android.net.IpSecManager.SpiUnavailableException;
  }

  public final class NetworkStats implements java.lang.Iterable<android.net.NetworkStats.Entry> android.os.Parcelable {
    ctor public NetworkStats(long, int);
    method @NonNull public android.net.NetworkStats add(@NonNull android.net.NetworkStats);
    method @NonNull public android.net.NetworkStats addEntry(@NonNull android.net.NetworkStats.Entry);
    method public int describeContents();
    method @NonNull public android.net.NetworkStats subtract(@NonNull android.net.NetworkStats);
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.net.NetworkStats> CREATOR;
    field public static final int DEFAULT_NETWORK_ALL = -1; // 0xffffffff
    field public static final int DEFAULT_NETWORK_NO = 0; // 0x0
    field public static final int DEFAULT_NETWORK_YES = 1; // 0x1
    field public static final String IFACE_VT = "vt_data0";
    field public static final int METERED_ALL = -1; // 0xffffffff
    field public static final int METERED_NO = 0; // 0x0
    field public static final int METERED_YES = 1; // 0x1
    field public static final int ROAMING_ALL = -1; // 0xffffffff
    field public static final int ROAMING_NO = 0; // 0x0
    field public static final int ROAMING_YES = 1; // 0x1
    field public static final int SET_ALL = -1; // 0xffffffff
    field public static final int SET_DEFAULT = 0; // 0x0
    field public static final int SET_FOREGROUND = 1; // 0x1
    field public static final int TAG_NONE = 0; // 0x0
    field public static final int UID_ALL = -1; // 0xffffffff
    field public static final int UID_TETHERING = -5; // 0xfffffffb
  }

  public static class NetworkStats.Entry {
    ctor public NetworkStats.Entry(@Nullable String, int, int, int, int, int, int, long, long, long, long, long);
  }

  public class TrafficStats {
    method public static void setThreadStatsTagApp();
    method public static void setThreadStatsTagBackup();
    method public static void setThreadStatsTagRestore();
    field public static final int TAG_NETWORK_STACK_IMPERSONATION_RANGE_END = -113; // 0xffffff8f
    field public static final int TAG_NETWORK_STACK_IMPERSONATION_RANGE_START = -128; // 0xffffff80
    field public static final int TAG_NETWORK_STACK_RANGE_END = -257; // 0xfffffeff
    field public static final int TAG_NETWORK_STACK_RANGE_START = -768; // 0xfffffd00
    field public static final int TAG_SYSTEM_IMPERSONATION_RANGE_END = -241; // 0xffffff0f
    field public static final int TAG_SYSTEM_IMPERSONATION_RANGE_START = -256; // 0xffffff00
  }

}

package android.net.netstats.provider {

  public abstract class NetworkStatsProvider {
    ctor public NetworkStatsProvider();
    method public void notifyAlertReached();
    method public void notifyLimitReached();
    method public void notifyStatsUpdated(int, @NonNull android.net.NetworkStats, @NonNull android.net.NetworkStats);
    method public void notifyWarningReached();
    method public abstract void onRequestStatsUpdate(int);
    method public abstract void onSetAlert(long);
    method public abstract void onSetLimit(@NonNull String, long);
    method public void onSetWarningAndLimit(@NonNull String, long, long);
    field public static final int QUOTA_UNLIMITED = -1; // 0xffffffff
  }

}

